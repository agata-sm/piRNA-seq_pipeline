import glob
import pandas
import os
from ordered_set import OrderedSet


# Config file
configfile: "config.yml"

#working directory
#workdir: config['workdir']

# Paths
datadir = config["datadir"]

resdir= config["resdir"]

fastqcdir = resdir + "fastqc/"
cutadaptdir= resdir + "cutadapt/"
multiqcdir = resdir + "multiqc/"
bwt_idx_dir = resdir + "bwt_idx/"

mappeddir= resdir + "mapped/"
bowtie_v= mappeddir + "bowtie_v/"

ntdistrdir= resdir + "nt_distribution/"
protracdir= resdir + "proTRAC/"
protracdir_runs= protracdir + "runs/"
protracdir_smpl= protracdir + "samples/"
protracdir_proc= protracdir + "processed/"
protracdir_merged= protracdir + "merged/"


logdir = config["logdir"]

tmpdir= os.getenv('TMPDIR', default='/tmp')

tempdir= resdir + "temporary/"

# Get samples & file bases in the fastq data directory
fastq_base = glob.glob(datadir + "*.fastq.gz")                  
fastq_base = [s.replace('.fastq.gz', '') for s in fastq_base]
fastq_pths = fastq_base #list of input fastq files with Paths       
fastq_base = [s.replace(datadir, '') for s in fastq_base]

samples_base = list(set(fastq_base))

#####################
## TMPDIR

# in this version (7.02) $TMPDIR is used in the shell code chunks
#####################


report: resdir + "report/piRNA.rst"

rule all:
    input:
        multiqcdir + "multiqc_report.html",
        resdir + "rulegraph.png",
        resdir + "dag.png",
        ntdistrdir + "plots",
        #expand(protracdir_runs + "proTRAC_{id}", id=samples_base),
        #expand(protracdir_proc + "{id}_processed/" + "{id}.proTRAC.bed", id=samples_base)
        protracdir_merged + "proTRAC_merged_clusters.bed",
        protracdir_proc + "plots/proTRAC_stats_plots.pdf",
        bowtie_v + "counted_by_gene_biotype/plots/biotype_representation.plot.pdf"


#idx for bowtie
rule bowtie_idx:
    input:
        config["ENS_GENOME_FA"]
    output:
        idx= bwt_idx_dir + "dm6_bwt.1.ebwt",
        idxrev= bwt_idx_dir + "dm6_bwt.rev.1.ebwt"
    log:
        logdir + "bwt_idx.log"
    shell:
        """
        pth="{output.idx}"
        bowtie-build --threads 2 -f {input} ${{pth%.1.ebwt}} &> {log}
        """


rule cutadapt:
    input:
        datadir + "{id}.fastq.gz"
    output:
        fastqgz= cutadaptdir + "{id}.trimmed.fastq.gz",
        log= logdir + "{id}.cutadapt.log"
    shell:
        """
        cutadapt -a AGATCGGAAGAGCA -m 17 -j 0 -o {output.fastqgz} {input} &> {output.log}
        """


rule fastqc:
    input:
        cutadaptdir + "{id}.trimmed.fastq.gz"
    output:
        html= fastqcdir + "{id}_fastqc.html",
        ziparch= fastqcdir + "{id}_fastqc.zip"
    shell:
        """
        # Run fastQC and save the output to the current directory
        fastqc {input} -q -o .

        # Move the files which are used in the workflow
        mv {wildcards.id}.trimmed_fastqc.html {output.html}
        mv {wildcards.id}.trimmed_fastqc.zip {output.ziparch}
        """

rule nt_distr:
    input:
        gz= cutadaptdir + "{id}.trimmed.fastq.gz"
    output:
        nt1= ntdistrdir + "{id}.trimmed.1_nt_distr.tab",
        nt10= ntdistrdir + "{id}.trimmed.10_nt_distr.tab"
    shell:
        """
        TMPDIR="${{TMPDIR:-/tmp}}"
        perl {config[srcpth]}/plotting/1st_nt_distr_v1.3.pl --infile {input.gz} --outdir $(dirname {output.nt1})
        """

rule plots:
    input:
        expand(ntdistrdir + "{id}.trimmed.1_nt_distr.tab", id=samples_base),
        expand(ntdistrdir + "{id}.trimmed.10_nt_distr.tab", id=samples_base)
    output:
        directory(ntdistrdir + "plots")
    shell:
        """
        echo $(dirname {input[0]})
        Rscript {config[srcpth]}/plotting/plot_distr_1_10.R --indir $(dirname {input[0]})
        """


rule map_bowtie_v1:
    input:
        gz= cutadaptdir + "{id}.trimmed.fastq.gz",
        idx= bwt_idx_dir + "dm6_bwt.1.ebwt",
        idxrev= bwt_idx_dir + "dm6_bwt.rev.1.ebwt"
    output:
        log= logdir + "{id}.bowtie_v1.log",
        bam= bowtie_v + "{id}.bwt_v1.sorted.bam"
    shell:
        """
        pth="{input.idx}"
        foo="{input.idxrev}"
        TMPDIR="${{TMPDIR:-/tmp}}"
       
        gzip -dc < {input.gz} | bowtie -v 1 -a --best --strata \
        -q -S -p 2 -t ${{pth%.1.ebwt}} - 2> {output.log} | samtools sort -T $TMPDIR/{wildcards.id}.tmp -o {output.bam} -
        
        samtools index {output.bam}
        """



rule featureCounts:
    input:
        expand(bowtie_v + "{id}.bwt_v1.sorted.bam", id=samples_base)
    output:
        geneid_cnt= bowtie_v + "counted_by_gene_id/geneid.counts.fCnts.tab",
        biotype_cnt= bowtie_v + "counted_by_gene_biotype/biotype.counts.fCnts.tab",
        repeatid_cnt= bowtie_v + "counted_by_repeat_id/repeat_geneid.counts.fCnts.tab",
        geneid_log= logdir + "geneid.counts.fCnts.tab.summary",
        repeatid_log= logdir + "repeat_geneid.counts.fCnts.tab.summary",
        biotype_log= logdir + "biotype.counts.fCnts.tab.summary"
    shell:
        """
        featureCounts -M -s 0 --fraction -t exon -g gene_id \
        -a {config[ENS_GTF]} \
        -o {output.geneid_cnt} {input}

        featureCounts -M -s 0 --fraction -t exon -g gene_biotype \
        -a {config[ENS_GTF]} \
        -o {output.biotype_cnt} {input}

        featureCounts -M -s 0 --fraction -t exon -g gene_id \
        -a {config[REPEATMASKER_GTF]} \
        -o {output.repeatid_cnt} {input}

        cp {output.geneid_cnt}.summary {output.geneid_log}
        cp {output.biotype_cnt}.summary {output.biotype_log}
        cp {output.repeatid_cnt}.summary {output.repeatid_log}
        """

rule plot_biotype:
    input:
        bowtie_v + "counted_by_gene_biotype/biotype.counts.fCnts.tab"
    output:
        tmp= temporary(bowtie_v + "counted_by_gene_biotype/foo.tab"),
        plot= bowtie_v + "counted_by_gene_biotype/plots/biotype_representation.plot.pdf"
    shell:
        """
        awk 'NR>1{{print }}' {input} | awk '{{printf $1; for(i=7;i<=NF;i++) printf "\t" $i; printf ORS}}' >{output.tmp}

        Rscript {config[srcpth]}/plotting/plot_biotype.R --infile {output.tmp}
        """

################################
## piRNA rules
## proTRAC
################################

rule preproc_reads_proTRAC:
    input:
        cutadaptdir + "{id}.trimmed.fastq.gz"
    output:
        temporary(tempdir + "{id}.collapsed.no-dust.map.weighted-10000-1000-b-1")
    log:
        map= logdir + "{id}.sRNAmapper.stdouterr.log",
        realloc= logdir + "{id}.reallocate.stdouterr.log"
    shell:
        """
        TMPDIR="${{TMPDIR:-/tmp}}"
                
        cp {input} $TMPDIR
        gzip -d $TMPDIR/{wildcards.id}.trimmed.fastq.gz
        
        echo ""
        echo "read preprocessing for file {input}"

        perl {config[NGSTB_PTH]}/TBr2/TBr2_fastq2fasta.pl -i $TMPDIR/{wildcards.id}.trimmed.fastq -o $TMPDIR/{wildcards.id}.trimmed.fa
        
        perl {config[NGSTB_PTH]}/TBr2/TBr2_collapse.pl -i $TMPDIR/{wildcards.id}.trimmed.fa -o $TMPDIR/{wildcards.id}.collapsed.fa

        perl {config[NGSTB_PTH]}/TBr2/TBr2_duster.pl -i $TMPDIR/{wildcards.id}.collapsed.fa

        echo ""
        echo "read mapping for file {input}"


        perl {config[NGSTB_PTH]}/sRNAmapper.pl -i $TMPDIR/{wildcards.id}.collapsed.fa.no-dust \
            -g {config[ENS_GENOME_FA]} -alignments best -output $TMPDIR/{wildcards.id}.collapsed.no-dust.map &> {log.map}
    
        echo ""
        echo "alignment post processing for file {input}"

        perl {config[NGSTB_PTH]}/reallocate.pl $TMPDIR/{wildcards.id}.collapsed.no-dust.map 10000 1000 b 1 &> {log.realloc}

        mv $TMPDIR/{wildcards.id}.collapsed.no-dust.map.weighted-10000-1000-b-1 {output}
        echo ""
        """
     


rule proTRAC:
    input:
        tempdir + "{id}.collapsed.no-dust.map.weighted-10000-1000-b-1"
    output:
        protrac= directory(protracdir_runs + "proTRAC_{id}"),
        smpl= protracdir_smpl + "results.table.{id}"
    log:
        protrac= logdir + "{id}.proTRAC.stdouterr.log"
    shell:
        """     
        echo ""
        echo "piRNA cluster detection for file {input}"

        perl {config[NGSTB_PTH]}/proTRAC_2.4.3.pl -genome {config[ENS_GENOME_FA]} \
            -map {input} \
            -swsize 1000 -swincr 100 -clsize 500 -pimax 35 -pisize 0.3 -1Tor10A 0.3 &> {log.protrac}
        
        echo ""
        echo "mv proTRAC_{wildcards.id}.* {output.protrac}"
        mkdir -p $(dirname {output.protrac})/proTRAC_{wildcards.id}
        mv proTRAC_{wildcards.id}.* {output.protrac}/
        cp {output.protrac}/**/results.table {output.smpl}
        """

rule proTRAC_process:
    input:
        protracdir_smpl + "results.table.{id}"
    output:
        protracdir_proc +  "{id}.proTRAC.bed",
        protracdir_proc +  "{id}.proTRAC.summary",
        protracdir_proc +  "{id}.proTRAC.tab"
    shell:
        """
        perl {config[srcpth]}/parse_proTRAC.pl --infile {input} --outdir $(dirname {output[0]})
        """

rule merge_clusters:
    input:
        expand(protracdir_proc + "{id}.proTRAC.bed", id=samples_base)
    output:
        protracdir_merged + "proTRAC_merged_clusters.bed"
    shell:
        """
        bedops -m {input} >{output}
        """

rule proTRAC_run_plots:
    input:
        expand(protracdir_proc + "{id}.proTRAC.summary", id=samples_base)
    output:
        protracdir_proc + "plots/proTRAC_stats_plots.pdf"  
    shell:
        """
        Rscript {config[srcpth]}/plotting/plot_protrac_stats.R --indir $(dirname {input[0]})
        """

################################
## final rules
################################

rule generate_rulegraph:
    """
    Generate a rulegraph for the workflow.
    """
    output:
        resdir + "rulegraph.png",
        resdir + "dag.png"
    shell:
        """
        snakemake --snakefile {config[snkpth]} --config max_reads=0 --rulegraph | dot -Tpng >{output[0]}
        snakemake --snakefile {config[snkpth]} --config max_reads=0 --dag | dot -Tpng >{output[1]}
        """


# Rule: collate MultiQC report
rule MultiQC:
    input:
        expand(fastqcdir + "{id}_fastqc.zip", id=samples_base),
        expand(logdir + "{id}.cutadapt.log", id=samples_base),
        expand(logdir + "{id}.bowtie_v1.log", id=samples_base),
        logdir + "biotype.counts.fCnts.tab.summary",
        logdir + "geneid.counts.fCnts.tab.summary"
    output:
        multiqcdir + "multiqc_report.html"
    shell:
        """
        multiqc --outdir $(dirname {output}) {resdir} {logdir}
        """



